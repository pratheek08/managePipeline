trigger:
- main
 
resources:
- repo: self
 
variables:
 
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '1c2f04df-8362-46c1-8446-2d45602cc971'
  imageRepository: 'dotnetpractice'
  containerRegistry: 'pratheekacr3.azurecr.io'
  dockerfilePath: '/src/Web/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'pratheekacr31c3d-auth'
 
  # Agent VM image name
pool:
  name: 'my-pools'
 
 
stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET SDK 8.0'
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet
 
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '**/*.sln'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '**/*.sln'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: 'tests/UnitTests/**.csproj'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
 
    - upload: manifests
      artifact: manifests
 
# - stage: Deploy
#   displayName: Deploy stage
#   dependsOn: Build
 
#   jobs:
#   - deployment: Deploy
#     displayName: Deploy
#     pool:
#       vmImage: $(vmImageName)
#     environment: 'dotnetpractice.default'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: KubernetesManifest@0
#             displayName: Create imagePullSecret
#             inputs:
#               action: createSecret
#               secretName: $(imagePullSecret)
#               dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
 
#           - task: KubernetesManifest@0
#             displayName: Deploy to Kubernetes cluster
#             inputs:
#               action: deploy
#               manifests: |
#                 $(Pipeline.Workspace)/manifests/deployment.yml
#                 $(Pipeline.Workspace)/manifests/service.yml
#               imagePullSecrets: |
#                 $(imagePullSecret)
#               containers: |
#                 $(containerRegistry)/$(imageRepository):$(tag)
